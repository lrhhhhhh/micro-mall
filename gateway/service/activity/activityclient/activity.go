// Code generated by goctl. DO NOT EDIT!
// Source: activity.proto

package activityclient

import (
	"context"

	"gateway/service/activity"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ActivityListReq    = activity.ActivityListReq
	ActivityListResp   = activity.ActivityListResp
	ActivityModel      = activity.ActivityModel
	ActivityReq        = activity.ActivityReq
	ActivityResp       = activity.ActivityResp
	BaseActivityResp   = activity.BaseActivityResp
	CreateActivityResp = activity.CreateActivityResp

	Activity interface {
		CreateActivity(ctx context.Context, in *ActivityReq, opts ...grpc.CallOption) (*CreateActivityResp, error)
		UpdateActivity(ctx context.Context, in *ActivityReq, opts ...grpc.CallOption) (*BaseActivityResp, error)
		GetActivity(ctx context.Context, in *ActivityReq, opts ...grpc.CallOption) (*ActivityResp, error)
		DeleteActivity(ctx context.Context, in *ActivityReq, opts ...grpc.CallOption) (*BaseActivityResp, error)
		GetActivityList(ctx context.Context, in *ActivityListReq, opts ...grpc.CallOption) (*ActivityListResp, error)
	}

	defaultActivity struct {
		cli zrpc.Client
	}
)

func NewActivity(cli zrpc.Client) Activity {
	return &defaultActivity{
		cli: cli,
	}
}

func (m *defaultActivity) CreateActivity(ctx context.Context, in *ActivityReq, opts ...grpc.CallOption) (*CreateActivityResp, error) {
	client := activity.NewActivityClient(m.cli.Conn())
	return client.CreateActivity(ctx, in, opts...)
}

func (m *defaultActivity) UpdateActivity(ctx context.Context, in *ActivityReq, opts ...grpc.CallOption) (*BaseActivityResp, error) {
	client := activity.NewActivityClient(m.cli.Conn())
	return client.UpdateActivity(ctx, in, opts...)
}

func (m *defaultActivity) GetActivity(ctx context.Context, in *ActivityReq, opts ...grpc.CallOption) (*ActivityResp, error) {
	client := activity.NewActivityClient(m.cli.Conn())
	return client.GetActivity(ctx, in, opts...)
}

func (m *defaultActivity) DeleteActivity(ctx context.Context, in *ActivityReq, opts ...grpc.CallOption) (*BaseActivityResp, error) {
	client := activity.NewActivityClient(m.cli.Conn())
	return client.DeleteActivity(ctx, in, opts...)
}

func (m *defaultActivity) GetActivityList(ctx context.Context, in *ActivityListReq, opts ...grpc.CallOption) (*ActivityListResp, error) {
	client := activity.NewActivityClient(m.cli.Conn())
	return client.GetActivityList(ctx, in, opts...)
}
