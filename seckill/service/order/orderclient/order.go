// Code generated by goctl. DO NOT EDIT!
// Source: order.proto

package orderclient

import (
	"context"

	"seckill/service/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseOrderResp = order.BaseOrderResp
	OrderListReq  = order.OrderListReq
	OrderListResp = order.OrderListResp
	OrderModel    = order.OrderModel

	Order interface {
		CreateOrder(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*OrderModel, error)
		CreateOrderRevert(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*OrderModel, error)
		CreateOrderAndDeductAsync(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*OrderModel, error)
		UpdateOrder(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*BaseOrderResp, error)
		GetOrder(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*OrderModel, error)
		DeleteOrder(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*BaseOrderResp, error)
		GetOrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) CreateOrder(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*OrderModel, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrder) CreateOrderRevert(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*OrderModel, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderRevert(ctx, in, opts...)
}

func (m *defaultOrder) CreateOrderAndDeductAsync(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*OrderModel, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderAndDeductAsync(ctx, in, opts...)
}

func (m *defaultOrder) UpdateOrder(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*BaseOrderResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateOrder(ctx, in, opts...)
}

func (m *defaultOrder) GetOrder(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*OrderModel, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

func (m *defaultOrder) DeleteOrder(ctx context.Context, in *OrderModel, opts ...grpc.CallOption) (*BaseOrderResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.DeleteOrder(ctx, in, opts...)
}

func (m *defaultOrder) GetOrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetOrderList(ctx, in, opts...)
}
