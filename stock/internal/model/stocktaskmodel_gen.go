// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stockTaskFieldNames          = builder.RawFieldNames(&StockTask{})
	stockTaskRows                = strings.Join(stockTaskFieldNames, ",")
	stockTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(stockTaskFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	stockTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(stockTaskFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	stockTaskModel interface {
		Insert(ctx context.Context, data *StockTask) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StockTask, error)
		Update(ctx context.Context, data *StockTask) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStockTaskModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StockTask struct {
		Id      int64 `db:"id"`
		StockId int64 `db:"stock_id"`
		Amount  int64 `db:"amount"`
	}
)

func newStockTaskModel(conn sqlx.SqlConn) *defaultStockTaskModel {
	return &defaultStockTaskModel{
		conn:  conn,
		table: "`stock_task`",
	}
}

func (m *defaultStockTaskModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStockTaskModel) FindOne(ctx context.Context, id int64) (*StockTask, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stockTaskRows, m.table)
	var resp StockTask
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStockTaskModel) Insert(ctx context.Context, data *StockTask) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, stockTaskRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StockId, data.Amount)
	return ret, err
}

func (m *defaultStockTaskModel) Update(ctx context.Context, data *StockTask) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stockTaskRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StockId, data.Amount, data.Id)
	return err
}

func (m *defaultStockTaskModel) tableName() string {
	return m.table
}
