// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	activityFieldNames          = builder.RawFieldNames(&Activity{})
	activityRows                = strings.Join(activityFieldNames, ",")
	activityRowsExpectAutoSet   = strings.Join(stringx.Remove(activityFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	activityRowsWithPlaceHolder = strings.Join(stringx.Remove(activityFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	activityModel interface {
		Insert(ctx context.Context, data *Activity) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Activity, error)
		Update(ctx context.Context, data *Activity) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultActivityModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Activity struct {
		Id             uint64  `db:"id"`
		ActivityName   string  `db:"activity_name"`
		GoodsId        int64   `db:"goods_id"`
		StockId        int64   `db:"stock_id"`
		StartTime      int64   `db:"start_time"`
		EndTime        int64   `db:"end_time"`
		Total          int64   `db:"total"`
		Status         int64   `db:"status"`
		BuyLimit       int64   `db:"buy_limit"`
		BuyProbability float64 `db:"buy_probability"`
	}
)

func newActivityModel(conn sqlx.SqlConn) *defaultActivityModel {
	return &defaultActivityModel{
		conn:  conn,
		table: "`activity`",
	}
}

func (m *defaultActivityModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultActivityModel) FindOne(ctx context.Context, id uint64) (*Activity, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", activityRows, m.table)
	var resp Activity
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActivityModel) Insert(ctx context.Context, data *Activity) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, activityRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ActivityName, data.GoodsId, data.StockId, data.StartTime, data.EndTime, data.Total, data.Status, data.BuyLimit, data.BuyProbability)
	return ret, err
}

func (m *defaultActivityModel) Update(ctx context.Context, data *Activity) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, activityRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ActivityName, data.GoodsId, data.StockId, data.StartTime, data.EndTime, data.Total, data.Status, data.BuyLimit, data.BuyProbability, data.Id)
	return err
}

func (m *defaultActivityModel) tableName() string {
	return m.table
}
